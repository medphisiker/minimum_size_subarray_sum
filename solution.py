from typing import List


class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        """Функция возвращает минимальную длину подмассива в массиве `nums`,
        сумма которого больше или равна `target`.

        Алгоритм работает следующим образом:
        1. Используются два указателя (`left` и `right`), определяющие текущее "окно",
        - подмассив в исходном массиве.
        2. Правый указатель (`right`) перемещается вправо, расширяя окно и увеличивая
        сумму элементов в нем.
        3. Когда сумма элементов в окне становится больше или равна `target`:
        - Обновляется минимальная длина подмассива, если текущая длина окна меньше
        ранее найденной.
        - Левый указатель (`left`) перемещается вправо, сужая окно и уменьшая сумму,
        чтобы попытаться найти более короткий подходящий подмассив.
        4. Процесс продолжается до тех пор, пока правый указатель не пройдет весь массив.

        Временная сложность O(n) - в худшем случае оба указателя пройдут весь массив по одному разу.
        Пространственная сложность O(1) - память на доп. константы

        Args:
            target (int): порог по сумме элементов подмассива, который мы ищем
            nums (List[int]): массив положительных целых чисел

        Returns:
            int: минимальная длина подмассива, сумма которого больше или равна порогу `target`
        """
        left = 0
        window_sum = 0
        min_length = float("inf")

        # Двигаем правый указатель
        for right in range(len(nums)):
            window_sum += nums[right]

            # Пока сумма окна >= target, пытаемся уменьшить окно
            while window_sum >= target:
                min_length = min(min_length, right - left + 1)
                window_sum -= nums[left]
                left += 1

        # Если не нашли подходящего подмассива, возвращаем 0
        return 0 if min_length == float("inf") else min_length
